From 17d3c28a3ff5e877f4286cb8b4f804447618fa6f Mon Sep 17 00:00:00 2001
From: Isuru Fernando <isuruf@gmail.com>
Date: Thu, 15 Aug 2019 02:50:37 +0000
Subject: [PATCH 4/5] Unbundle LLVM

---
 tensorflow/workspace.bzl                      |   1 +
 third_party/systemlibs/generate_llvm_build.py | 301 ++++++++++++++++++
 third_party/systemlibs/syslibs_configure.bzl  |   1 +
 3 files changed, 303 insertions(+)
 create mode 100644 third_party/systemlibs/generate_llvm_build.py

diff --git a/tensorflow/workspace.bzl b/tensorflow/workspace.bzl
index 3397d1070d1..716757ade64 100755
--- a/tensorflow/workspace.bzl
+++ b/tensorflow/workspace.bzl
@@ -691,6 +691,7 @@ def tf_repositories(path_prefix = "", tf_repo_name = ""):
         name = "llvm-project",
         sha256 = LLVM_SHA256,
         strip_prefix = "llvm-project-" + LLVM_COMMIT,
+        system_build_file = clean_dep("//third_party/systemlibs:llvm.BUILD"),
         urls = LLVM_URLS,
         additional_build_files = {
             clean_dep("//third_party/llvm:llvm.autogenerated.BUILD"): "llvm/BUILD",
diff --git a/third_party/systemlibs/generate_llvm_build.py b/third_party/systemlibs/generate_llvm_build.py
new file mode 100644
index 00000000000..54745b46f10
--- /dev/null
+++ b/third_party/systemlibs/generate_llvm_build.py
@@ -0,0 +1,301 @@
+# Bazel BUILD file generator for system LLVM.
+
+import os
+
+llvm_libs = [
+    "AArch64AsmParser",
+    "AArch64CodeGen",
+    "AArch64Desc",
+    "AArch64Disassembler",
+    "AArch64Info",
+    "AArch64Utils",
+    "AggressiveInstCombine",
+    "AMDGPUAsmParser",
+    "AMDGPUCodeGen",
+    "AMDGPUDesc",
+    "AMDGPUDisassembler",
+    "AMDGPUInfo",
+    "AMDGPUUtils",
+    "Analysis",
+    "ARMAsmParser",
+    "ARMCodeGen",
+    "ARMDesc",
+    "ARMDisassembler",
+    "ARMInfo",
+    "ARMUtils",
+    "AsmParser",
+    "AsmPrinter",
+    "BinaryFormat",
+    "BitReader",
+    "BitstreamReader",
+    "BitWriter",
+    "BPFAsmParser",
+    "BPFCodeGen",
+    "BPFDesc",
+    "BPFDisassembler",
+    "BPFInfo",
+    "CodeGen",
+    "Core",
+    "Coroutines",
+    "Coverage",
+    "DebugInfoCodeView",
+    "DebugInfoDWARF",
+    "DebugInfoGSYM",
+    "DebugInfoMSF",
+    "DebugInfoPDB",
+    "Demangle",
+    "DlltoolDriver",
+    "ExecutionEngine",
+    "FuzzMutate",
+    "GlobalISel",
+    "HexagonAsmParser",
+    "HexagonCodeGen",
+    "HexagonDesc",
+    "HexagonDisassembler",
+    "HexagonInfo",
+    "InstCombine",
+    "Instrumentation",
+    "IntelJITEvents",
+    "Interpreter",
+    "ipo",
+    "IRReader",
+    "JITLink",
+    "LanaiAsmParser",
+    "LanaiCodeGen",
+    "LanaiDesc",
+    "LanaiDisassembler",
+    "LanaiInfo",
+    "LibDriver",
+    "LineEditor",
+    "Linker",
+    "LTO",
+    "MC",
+    "MCA",
+    "MCDisassembler",
+    "MCJIT",
+    "MCParser",
+    "MipsAsmParser",
+    "MipsCodeGen",
+    "MipsDesc",
+    "MipsDisassembler",
+    "MipsInfo",
+    "MIRParser",
+    "MSP430AsmParser",
+    "MSP430CodeGen",
+    "MSP430Desc",
+    "MSP430Disassembler",
+    "MSP430Info",
+    "NVPTXCodeGen",
+    "NVPTXDesc",
+    "NVPTXInfo",
+    "ObjCARCOpts",
+    "Object",
+    "ObjectYAML",
+    "Option",
+    "OrcJIT",
+    "Passes",
+    "PowerPCAsmParser",
+    "PowerPCCodeGen",
+    "PowerPCDesc",
+    "PowerPCDisassembler",
+    "PowerPCInfo",
+    "ProfileData",
+    "Remarks",
+    "RISCVAsmParser",
+    "RISCVCodeGen",
+    "RISCVDesc",
+    "RISCVDisassembler",
+    "RISCVInfo",
+    "RISCVUtils",
+    "RuntimeDyld",
+    "ScalarOpts",
+    "SelectionDAG",
+    "SparcAsmParser",
+    "SparcCodeGen",
+    "SparcDesc",
+    "SparcDisassembler",
+    "SparcInfo",
+    "Support",
+    "Symbolize",
+    "SystemZAsmParser",
+    "SystemZAsmPrinter",
+    "SystemZCodeGen",
+    "SystemZDesc",
+    "SystemZDisassembler",
+    "SystemZInfo",
+    "TableGen",
+    "Target",
+    "TextAPI",
+    "TransformUtils",
+    "Vectorize",
+    "WebAssemblyAsmParser",
+    "WebAssemblyCodeGen",
+    "WebAssemblyDesc",
+    "WebAssemblyDisassembler",
+    "WebAssemblyInfo",
+    "WindowsManifest",
+    "X86AsmParser",
+    "X86CodeGen",
+    "X86Desc",
+    "X86Disassembler",
+    "X86Info",
+    "X86Utils",
+    "XCoreCodeGen",
+    "XCoreDesc",
+    "XCoreDisassembler",
+    "XCoreInfo",
+    "XRay"
+]
+
+def process_name(name):
+  if name.endswith("Opts"):
+    return name[:-4].lower()
+  return name.lower()
+
+llvm_libs_dict = dict((process_name(name), name) for name in llvm_libs)
+
+llvm_libs_dict["scalar"] = "ScalarOpts"
+
+
+INIT_TEXT = """
+# Bazel BUILD file for system LLVM
+#
+# Auto-generated by generate_llvm_build.py
+
+licenses(["notice"])
+
+filegroup(
+    name = "LICENSE.TXT",
+    visibility = ["//visibility:public"],
+)
+
+load(
+    "@org_tensorflow//third_party/llvm:llvm.bzl",
+    "cmake_var_string",
+    "expand_cmake_vars",
+    "gentbl",
+    "llvm_all_cmake_vars",
+    "llvm_copts",
+    "llvm_defines",
+    "llvm_linkopts",
+    "llvm_support_platform_specific_srcs_glob",
+)
+
+# Binary targets used by Tensorflow.
+genrule(
+    name = "lnllvmtblgenlink",
+    outs = ["llvmtblgenlink"],
+    cmd = "ln -s $$(which llvm-tblgen) $@",
+)
+
+sh_binary(
+    name = "llvm-tblgen",
+    srcs = ["llvmtblgenlink"],
+    visibility = ["//visibility:public"],
+)
+
+genrule(
+    name = "lnfilecheck",
+    outs = ["filechecklink"],
+    cmd = "ln -s $$(which FileCheck) $@",
+)
+
+sh_binary(
+    name = "FileCheck",
+    srcs = ["filechecklink"],
+    visibility = ["//visibility:public"],
+)
+
+cc_library(
+   name = "config",
+   defines = llvm_defines,
+   visibility = ["//visibility:public"],
+)
+
+cc_library(
+   name = "x86_defs",
+   visibility = ["//visibility:public"],
+   deps = [
+       ":config",
+   ]
+)
+"""
+
+skipped_deps = [
+    ":attributes_compat_gen",
+    ":attributes_gen",
+    ":intrinsic_enums_gen",
+    ":intrinsics_impl_gen",
+    ":aarch64_target_gen",
+    ":x86_target_gen",
+    ":arm_target_gen",
+    ":instcombine_transforms_gen",
+]
+
+def cc_library(**kwargs):
+  name = kwargs.get("name")
+  if name in ["config", "x86_defs", "gtest", "gtest_main"]:
+    return
+  libname = name
+  if libname.startswith("arc_"):
+    libname = "sp" + libname
+  libname = llvm_libs_dict.get(libname.replace("_", ""), name)
+  deps = kwargs.get("deps", [])
+  deps = [d for d in deps if d not in skipped_deps]
+  if not deps:
+    print(f"""
+cc_library(
+    name = "{name}",
+    linkopts = ["-lLLVM{libname}"],
+    visibility = ["//visibility:public"],
+)""")
+  else:
+    deps_line = "\",\n        \"".join(deps)
+    print(f"""
+cc_library(
+    name = "{name}",
+    linkopts = ["-lLLVM{libname}"],
+    visibility = ["//visibility:public"],
+    deps = [
+        "{deps_line}",
+    ],
+)""")
+
+def glob(*args, **kwargs):     # pylint: disable=unused-argument
+  return []
+
+
+def genrule(*args, **kwargs):  # pylint: disable=unused-argument
+  pass
+
+llvm_support_platform_specific_srcs_glob = glob
+licenses = exports_files = load = package = expand_cmake_vars = genrule
+py_binary = template_rule = gentbl = cc_binary = filegroup = genrule
+llvm_copts = llvm_all_cmake_vars = llvm_defines = llvm_linkopts = []
+
+licenses(["notice"])
+
+exports_files(["LICENSE.TXT"])
+
+load(
+    "@org_tensorflow//third_party/llvm:llvm.bzl",
+    "cmake_var_string",
+    "expand_cmake_vars",
+    "gentbl",
+    "llvm_all_cmake_vars",
+    "llvm_copts",
+    "llvm_defines",
+    "llvm_linkopts",
+    "llvm_support_platform_specific_srcs_glob",
+)
+load(
+    "@org_tensorflow//third_party:common.bzl",
+    "template_rule",
+)
+
+third_party_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
+build_path = os.path.join(third_party_dir, "llvm", "llvm.autogenerated.BUILD")
+
+print(INIT_TEXT)
+with open(build_path, "r") as f:
+  exec(f.read())
diff --git a/third_party/systemlibs/syslibs_configure.bzl b/third_party/systemlibs/syslibs_configure.bzl
index 265fe968003..67bf3553f09 100644
--- a/third_party/systemlibs/syslibs_configure.bzl
+++ b/third_party/systemlibs/syslibs_configure.bzl
@@ -31,6 +31,7 @@ VALID_LIBS = [
     "icu",
     "jsoncpp_git",
     "libjpeg_turbo",
+    "llvm",
     "lmdb",
     "nasm",
     "nsync",
-- 
2.29.2.windows.3

