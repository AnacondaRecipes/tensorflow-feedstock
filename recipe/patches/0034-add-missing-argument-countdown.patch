From 1838e12ed46093dfb5883070bf2efd9846de78d4 Mon Sep 17 00:00:00 2001
From: Eric Lundby <Eric.Lundby@gmail.com>
Date: Mon, 5 May 2025 14:11:26 -0600
Subject: [PATCH 1/1] 34

---
 .../xla/backends/cpu/runtime/convolution_thunk_internal.h | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/third_party/xla/xla/backends/cpu/runtime/convolution_thunk_internal.h b/third_party/xla/xla/backends/cpu/runtime/convolution_thunk_internal.h
index 84fed6bb786..32d1930bbf2 100644
--- a/third_party/xla/xla/backends/cpu/runtime/convolution_thunk_internal.h
+++ b/third_party/xla/xla/backends/cpu/runtime/convolution_thunk_internal.h
@@ -28,6 +28,8 @@ limitations under the License.
 #include "xla/tsl/framework/convolution/eigen_spatial_convolutions.h"  // IWYU pragma: keep
 #include "xla/tsl/platform/logging.h"
 
+#include "absl/status/status.h"
+
 #define EIGEN_USE_THREADS
 #include "Eigen/Core"
 #include "Eigen/ThreadPool"
@@ -201,7 +203,7 @@ bool EigenTransposedConv2D(
     // If `count_down` is provided, we need to count it down after the work is
     // done.
     if (count_down) {
-      count_down.CountDown();
+      count_down.CountDown(absl::OkStatus());
     }
   };
 
@@ -342,7 +344,7 @@ void EigenGenericConv2D(
         Eigen::Index start = task_index * task_size;
         Eigen::Index end = std::min(start + task_size, feature_group_count);
         for (Eigen::Index i = start; i < end; ++i) {
-          auto on_done = [count_down]() mutable { count_down.CountDown(); };
+          auto on_done = [count_down = std::move(count_down)]() mutable { count_down.CountDown(absl::OkStatus()); };
           auto [output, convolved] = convolve_group(i);
           output.device(device, std::move(on_done)) = convolved;
         }
@@ -505,7 +507,7 @@ void EigenConv3D(const EigenDevice& device, ScalarType* out, ScalarType* lhs,
 
     auto output_reshaped = output.reshape(output_reshaped_dims).chip(i, 4);
     if (count_down) {
-      auto on_done = [count_down]() mutable { count_down.CountDown(); };
+      auto on_done = [count_down = std::move(count_down)]() mutable { count_down.CountDown(absl::OkStatus()); };
       output_reshaped.device(device, std::move(on_done)) = convolved;
     } else {
       output_reshaped.device(device) = convolved;
-- 
2.39.5 (Apple Git-154)

