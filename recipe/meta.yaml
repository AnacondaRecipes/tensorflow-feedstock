{% set version = "2.18.1" %}
{% set build = 0 %}

{% if cuda_compiler_version != "None" %}
{% set build = build + 200 %}
{% endif %}

# Quite often libml_dtypes-headers and ml_dtypes diverge.
# https://github.com/tensorflow/tensorflow/blob/v2.18.0/third_party/py/ml_dtypes/workspace.bzl
{% set libml_dtypes_version = "0.5.0" %}
{% set ml_dtypes_version = "0.4.1" %}

package:
  name: tensorflow-split
  version: {{ version }}

source:
  - url: https://github.com/tensorflow/tensorflow/archive/refs/tags/v{{ version.replace(".rc", "-rc") }}.tar.gz
    sha256: 467c512b631e72ad5c9d5c16b23669bcf89675de630cfbb58f9dde746d34afa8
    patches:
      - patches/0001-loosen-requirements.patch
      - patches/0002-Add-additional-absl_synchronization-linkage-to-gRPC.patch
      - patches/0003-Fix-missing-abseil-linkages.patch
      - patches/0004-Fix-protobuf_python-for-systemlibs.patch  # [not win]
      - patches/0005-Add-absl_log-systemlib.patch  # [not win]
      - patches/0006-Omit-linking-to-layout_proto_cc-if-protobuf-linkage-.patch  # [not win]
      - patches/0007-Fix-further-abseil-linkage.patch  # [not win]
      - patches/0008-Add-constraint-to-pybind11-systemlib.patch  # [not win]
      - patches/0009-Different-file-ending-for-flatbuffers-LICENSE.patch  # [not win]
      - patches/0010-Use-correct-hermetic-python.patch  # [not win]
      - patches/0011-Add-well_known_types_py_pb2-to-protobuf-systemlib.patch  # [not win]
      - patches/0012-Add-protobuf-toolchain.patch  # [not win]
      - patches/0013-fix-genproto.patch  # [not win]
      - patches/0014-Remove-some-usage-of-absl-str_format-in-CUDA.patch  # [(cuda_compiler_version or "").startswith("11")]
      - patches/0015-Adjust-relative-path-for-libdevice.patch  # [(cuda_compiler_version or "").startswith("12")]
      - patches/0016-Link-to-absl_log_flags-instead-of-absl_flags.patch  # [not win]
      - patches/0017-Update-ABSL-Log-Definition-for-libabsl_vlog_config_i.patch  # [not win]
      - patches/0018-add-absl_string_view-target.patch  # [not win]
      - patches/0019-add-absl_nullability-target.patch  # [not win]
      - patches/0020-add-absl_prefetch-target.patch  # [not win]
      - patches/0021-add-absl_die_if_null-target.patch  # [not win]
      - patches/0022-add-absl_crc32c-targets.patch  # [not win]
      - patches/0023-add-absl-tracing-target.patch  # [not win]
      - patches/0024-add-kernel_timeout_internal-target.patch  # [not win]
      - patches/0025-work-around-for-warning-that-clang-falsely-treats-as.patch  # [not win]
      - patches/0026-Hardcode-BUILD_PREFIX-in-build_pip_package.patch  # [not win]
      - patches/0027-Only-link-to-sparse_core_layout_proto_cc-headers.patch  # [not win]
      # Note that this patch generates two patches in the third_party directory. Which then get applied via bazel.
      - patches/0028-Protobuf-5-compatability.patch  # [not win]
      - patches/0029-Fix-ResolvePadding-to-be-consistent-in-the-size-of-t.patch
      - patches/0030-Avoid-linking-with-internal-nvrtc.patch
      - patches/0031-remove-dependencies-to-libcuda.patch   
      - patches/0032-loosen-hermetic-python.patch  # [not win]
      - patches/0033-win-fix-inline-perl.patch  # [win]
build:
  number: {{ build }}
  skip: true  # [python_impl == 'pypy']
  # https://www.tensorflow.org/install/source#tested_build_configurations
  skip: true  # [py<39 or py>312]
  skip: true  # [skip_cuda_prefect and (gpu_variant or "").startswith('cuda')]

requirements:
  build:
    - perl                                   # [not osx]
    - python                                 # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - nsync 1.24                             # [build_platform != target_platform]
    - snappy 1.2.1                           # [build_platform != target_platform]
    - giflib {{ giflib }}                    # [build_platform != target_platform]
    - jpeg {{ jpeg }}                        # [build_platform != target_platform]
    - icu {{ icu }}                          # [build_platform != target_platform]
    - libpng {{ libpng }}                    # [build_platform != target_platform]
    - flatbuffers                            # [build_platform != target_platform]
    - onednn                                 # [build_platform != target_platform]
    - onednn-cpu-threadpool                  # [build_platform != target_platform]
    - pybind11 2                             # [build_platform != target_platform]
    - numpy {{ numpy }}                      # [build_platform != target_platform]
    - {{ compiler('c') }}
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - clang    # [win]
    - llvmdev  # [win]
    - lld      # [win]
    - bazel 6.*
    # v0.2.0b1 contains patchelf support, see https://github.com/AnacondaRecipes/bazel-toolchain-feedstock/pull/3
    - bazel-toolchain >=0.2.0b1  # [not win]
    - libgrpc {{ libgrpc }}
    - libprotobuf {{ libprotobuf }}
    - nasm 2.14                              # [x86_64]
    - patchelf   # [unix]
    - sed        # [unix]
    # realpath is not available from the docker image for cuda <= 10.2
    # so we install coreutils here
    - coreutils  # [cuda_compiler_version != "None"]
    - patch      # [unix]
    - m2-patch   # [win]
    - rsync      # [unix]
    - sqlite     # [win]
  host:
    # GPU requirements for CUDA
    - cudnn  {{ cudnn }}  # [cuda_compiler_version != "None"]
    - nccl  {{ nccl }}    # [cuda_compiler_version != "None"]
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - cuda-cupti-dev    # [(cuda_compiler_version or "").startswith("12")]
    - cuda-cudart-dev   # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvml-dev     # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvtx-dev     # [(cuda_compiler_version or "").startswith("12")]
    - libcublas-dev     # [(cuda_compiler_version or "").startswith("12")]
    - libcusolver-dev   # [(cuda_compiler_version or "").startswith("12")]
    - libcurand-dev     # [(cuda_compiler_version or "").startswith("12")]
    - libcufft-dev      # [(cuda_compiler_version or "").startswith("12")]
    - libcusparse-dev   # [(cuda_compiler_version or "").startswith("12")]
    - libnvjitlink-dev  # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvcc-tools   # [(cuda_compiler_version or "").startswith("12")]
    - cuda-crt-tools    # [(cuda_compiler_version or "").startswith("12")]
    - cuda-nvprune      # [(cuda_compiler_version or "").startswith("12")]
    # conda build requirements
    - python
    - pip
    - packaging
    - zlib {{ zlib }}
    - libpng {{ libpng }}
    - libcurl {{ libcurl }}
    - curl {{ libcurl }}        # [win]
    - unzip 6.0    # [not win]
    - zip   3.0    # [not win]
    - m2-unzip     # [win]
    - m2-zip       # [win]
    - openjdk >=8
    - nsync 1.24
    # TF_SYSTEM_LIBS, see usage in
    # https://github.com/tensorflow/tensorflow/blob/v{{ version }}/third_party/systemlibs/syslibs_configure.bzl
    # their versions are specified in
    # https://github.com/tensorflow/tensorflow/blob/v{{ version }}/tensorflow/workspace2.bzl
    # but so far there have been no problems with leaving these
    # unpinned; though some restrictions come in for packages
    # that are also listed as a requirement for the pip_package.
    - libabseil {{ libabseil }}
    - astor
    - cython
    - dill
    - giflib {{ giflib }}
    - libgrpc {{ libgrpc }}
    - flatbuffers
    - icu {{ icu }}
    - jpeg {{ jpeg }}
    - libpng {{ libpng }}
    - libprotobuf {{ libprotobuf }}
    - libprotobuf-python-headers {{ libprotobuf }}
    - openssl {{ openssl }}
    - pybind11 2
    - sqlite {{ sqlite }}
    # snappy needs rtti enabled, this version of ours has it
    - snappy 1.2.1
    - zlib {{ zlib }}

outputs:
  # 2021/12/29: hmaarrfk
  # as of tensorflow 2.7.0 we need the tensorflow-base package to break
  # circular dependency when buliding tensorflow extra packages This annoying
  # circularity is broken upstream by the fact that they have to bootstrap
  # their builds
  - name: tensorflow-base
    script: build_pkg.sh  # [unix]
    script: build_pkg.bat  # [win]
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
      # weigh down cpu implementation and give cuda preference
      track_features:
        - tensorflow-cpu          # [cuda_compiler_version == "None"]
      entry_points:
        - toco_from_protos = tensorflow.lite.toco.python.toco_from_protos:main
        - tflite_convert = tensorflow.lite.python.tflite_convert:main
        - toco = tensorflow.lite.python.tflite_convert:main
        - saved_model_cli = tensorflow.python.tools.saved_model_cli:main
        # The tensorboard package adds this entry point.
        # - tensorboard = tensorboard.main:run_main
        - tf_upgrade_v2 = tensorflow.tools.compatibility.tf_upgrade_v2_main:main
      missing_dso_whitelist:
        - "**/_pywrap_tensorflow_internal.*" # loaded by python wrapper pywrap_tensorflow.py
        # some .sos look for other .sos in different site-packages directories. Root cause is probably
        # similar to with pytorch, that it loads libraries manually in the python code (TBC)
        - "**/libtensorflow_framework.so.2"
        - "**/libtensorflow_framework.2.dylib"
    requirements:
      # build requirements needs to pick up the compiler run_exports
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}              # [cuda_compiler_version != "None"]
        - clang    # [win]
        - llvmdev  # [win]
        - lld      # [win]
        - python                              # [build_platform != target_platform]
        - cross-python_{{ target_platform }}  # [build_platform != target_platform]
      host:
        # GPU reuqirements
        - cudnn                   # [cuda_compiler_version != "None"]
        - nccl 2.21.5.1           # [cuda_compiler_version != "None"]
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
        - cuda-cupti-dev    # [(cuda_compiler_version or "").startswith("12")]
        - cuda-cudart-dev   # [(cuda_compiler_version or "").startswith("12")]
        - cuda-nvml-dev     # [(cuda_compiler_version or "").startswith("12")]
        - cuda-nvtx-dev     # [(cuda_compiler_version or "").startswith("12")]
        - libcublas-dev     # [(cuda_compiler_version or "").startswith("12")]
        - libcusolver-dev   # [(cuda_compiler_version or "").startswith("12")]
        - libcurand-dev     # [(cuda_compiler_version or "").startswith("12")]
        - libcufft-dev      # [(cuda_compiler_version or "").startswith("12")]
        - libcusparse-dev   # [(cuda_compiler_version or "").startswith("12")]
        - libnvjitlink-dev  # [(cuda_compiler_version or "").startswith("12")]
        - cuda-nvcc-tools   # [(cuda_compiler_version or "").startswith("12")]
        - cuda-crt-tools    # [(cuda_compiler_version or "").startswith("12")]
        - cuda-nvprune      # [(cuda_compiler_version or "").startswith("12")]
        # conda build requirements
        - python
        - pip
        - packaging
        - wheel
        # TF_SYSTEM_LIBS
        - libabseil {{ libabseil }}
        - astor
        - cython
        - dill
        - giflib {{ giflib }}
        - libgrpc {{ libgrpc }}
        - flatbuffers
        - icu {{ icu }}
        - jpeg {{ jpeg }}
        - libcurl {{ libcurl }}
        - libpng {{ libpng }}
        - libprotobuf {{ libprotobuf }}
        - libprotobuf-python-headers {{ libprotobuf }}
        - openssl {{ openssl }}
        - pybind11 2
        # snappy needs rtti enabled, this version of ours has it
        - snappy 1.2.1
        - sqlite {{ sqlite }}
        - zlib {{ zlib }}
        # requirements specified by the package itself, see
        # github.com/tensorflow/tensorflow/blob/v{{ version }}/tensorflow/tools/pip_package/setup.py
        - absl-py >=1.0.0
        - astunparse >=1.6.0
        - gast >=0.2.1,!=0.5.0,!=0.5.1,!=0.5.2
        - google-pasta >=0.1.1
        - h5py >=3.11
        - ml_dtypes >={{ ml_dtypes_version }},<1.0.0
        - numpy {{ numpy }}
        - opt_einsum >=2.3.2
        - protobuf >=3.20.3,<6,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5
        - python-flatbuffers >=24.3.25
        - requests >=2.21.0,<3
        - six >=1.12
        - termcolor >=1.1.0
        - typing_extensions >=3.6.6
        - wrapt >=1.11.0
        # TF-API needs to move in sync
        - tensorboard >=2.18,<2.19
        - keras >=3.5.0
      run:
        - python
        - packaging
        - absl-py >=1.0.0
        - astunparse >=1.6.0
        - gast >=0.2.1,!=0.5.0,!=0.5.1,!=0.5.2
        - google-pasta >=0.1.1
        - grpcio {{ libgrpc }}.*
        - h5py >=3.10
        - ml_dtypes >={{ ml_dtypes_version }},<1.0.0
        - numpy >=1.26.0,<2.1.0
        - opt_einsum >=2.3.2
        - protobuf >=3.20.3,<6,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5
        - python-flatbuffers >=24.3.25
        - requests >=2.21.0,<3
        - six >=1.12
        - termcolor >=1.1.0
        - typing_extensions >=3.6.6
        - wrapt >=1.11.0
        # TF-API needs to move in sync
        - tensorboard >=2.18,<2.19
        - keras >=3.5.0
        # avoid that people without GPUs needlessly download ~0.5-1GB
        - __cuda                                                  # [cuda_compiler_version != "None"]
        # https://github.com/conda-forge/tensorflow-feedstock/issues/296#issuecomment-1835781851
        - cuda-nvcc-tools                                         # [(cuda_compiler_version or "").startswith("12")]
    # TODO: decide on the name of the package
    # run_constrained:
    #   What is the difference between these two packages?
    #   - tensorflow-io-gcs-filesystem >=0.21.0
    #   - tensorflow-io >=0.21.0
    test:
      commands:
        - exit 0

  - name: tensorflow
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
      # weigh down cpu implementation and give cuda preference
      track_features:
        - tensorflow-cpu          # [cuda_compiler_version == "None"]
    requirements:
      host:
        # Require python so that the CONDA_PY gets populated
        - python
        # Keep the cuda version here since it helps package solvers
        # decide on the cuda variant
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
      run:
        - python
        - {{ pin_subpackage('tensorflow-base', exact=True) }}
        # avoid that people without GPUs needlessly download ~0.5-1GB
        # This also helps mamba give preference to the CPU build
        - __cuda  # [cuda_compiler_version != "None"]
    test:
      files:
        - test_tensorflow.py
      requires:
        - pip
      imports:
        - tensorflow
      commands:
        # override any potential keras config file on the builder
        - set KERAS_BACKEND=tensorflow     # [win]
        - export KERAS_BACKEND=tensorflow  # [not win]
        - set PYTHONIOENCODING=utf-8       # [win]
        - pip check                  # [build_platform == target_platform]
        - cat test_tensorflow.py     # [unix]
        - python test_tensorflow.py  # [build_platform == target_platform]
        - tf_upgrade_v2 --help       # [build_platform == target_platform]
        # --help exits with exit code 1
        - test -x $PREFIX/bin/saved_model_cli  # [unix]
        - tflite_convert --help      # [build_platform == target_platform]
        - toco_from_protos --help    # [build_platform == target_platform]
        - toco --help                # [build_platform == target_platform]
        - python -c "import tensorflow as tf; assert tf.test.is_built_with_cuda()"      # [cuda_compiler_version != "None"]
        - python -c "import tensorflow as tf; assert not tf.test.is_built_with_cuda()"  # [cuda_compiler_version == "None"]
        # See https://github.com/conda-forge/tensorflow-feedstock/issues/364
        - python -c "import tensorflow as tf;graph = tf.function(lambda x:x).get_concrete_function(1.).graph;tf.compat.v1.train.export_meta_graph(graph=graph,graph_def=graph.as_graph_def())"

  - name: libtensorflow
    script: cp_libtensorflow.sh
    build:
      skip: true  # [win]
      string: cuda{{ cuda_compiler_version | replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
      run_exports:
        # tensorflow makes no ABI guarantees, need to pin to what we built with
        - libtensorflow {{ version }}
    requirements:
      # build requirements needs to pick up the compiler run_exports
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # Keep the cuda compiler here since it helps package solvers
        # decide on the cuda variant
        # https://github.com/conda-forge/tensorflow-feedstock/issues/162
        - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
      # host requirements to pick up run_exports
      host:
        - libabseil {{ libabseil }}
        - giflib {{ giflib }}
        - libgrpc {{ libgrpc }}
        - icu {{ icu }}
        - jpeg {{ jpeg }}
        - libcurl {{ libcurl }}
        - libpng {{ libpng }}
        - libprotobuf {{ libprotobuf }}
        - openssl {{ openssl }}
        # snappy needs rtti enabled, this version of ours has it
        - snappy 1.2.1
        - sqlite {{ sqlite }}
        - zlib {{ zlib }}
        - nccl 2.21.5.1    # [cuda_compiler_version != "None"]
      run:
        # avoid that people without GPUs needlessly download ~200-300MB
        - __cuda  # [cuda_compiler_version != "None"]
    test:
      files:
        - test_libtensorflow.sh
        - test_c.c
      requires:
        - {{ compiler('c') }}
      commands:
        - test -f $PREFIX/lib/libtensorflow${SHLIB_EXT}  # [cuda_compiler_version == "None"]
        - ./test_libtensorflow.sh                        # [cuda_compiler_version == "None" and build_platform == target_platform]

  - name: libtensorflow_cc
    script: cp_libtensorflow_cc.sh
    build:
      skip: true  # [win]
      string: cuda{{ cuda_compiler_version | replace('.', '') }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
      run_exports:
        # tensorflow makes no ABI guarantees, need to pin to what we built with
        - libtensorflow_cc {{ version }}
    requirements:
      # build requirements needs to pick up the compiler run_exports
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        # Keep the cuda compiler here since it helps package solvers
        # decide on the cuda variant
        # https://github.com/conda-forge/tensorflow-feedstock/issues/162
        - {{ compiler('cuda') }}  # [cuda_compiler_version != "None"]
      # host requirements to pick up run_exports
      host:
        - flatbuffers
        - giflib {{ giflib }}
        - icu {{ icu }}
        - libabseil {{ libabseil }}
        - libcurl {{ libcurl }}
        - libgrpc {{ libgrpc }}
        - jpeg {{ jpeg }}
        - libpng {{ libpng }}
        - libprotobuf {{ libprotobuf }}
        - openssl {{ openssl }}
        # snappy needs rtti enabled, this version of ours has it
        - snappy 1.2.1
        - sqlite {{ sqlite }}
        - zlib {{ zlib }}
        - nccl 2.21.5.1      # [cuda_compiler_version != "None"]
      run:
        - libml_dtypes-headers >={{ libml_dtypes_version }},<0.6
        # avoid that people without GPUs needlessly download ~200-300MB
        - __cuda  # [cuda_compiler_version != "None"]
    test:
      files:
        - test_libtensorflow_cc.sh
        - test_cc.cc
      requires:
        - {{ compiler('cxx') }}
      commands:
        - test -f $PREFIX/lib/libtensorflow_cc${SHLIB_EXT}  # [not win and cuda_compiler_version == "None"]
        - ./test_libtensorflow_cc.sh                        # [not win and cuda_compiler_version == "None" and build_platform == target_platform]

  # 2021/08/01, hmaarrfk
  # While this seems like a roundabout way of defining the package name
  # It helps the linter avoid errors on a package not having tests.
  {% set tensorflow_cpu_gpu = "tensorflow-cpu" %}   # [cuda_compiler_version == "None"]
  {% set tensorflow_cpu_gpu = "tensorflow-gpu" %}   # [cuda_compiler_version != "None"]
  - name: {{ tensorflow_cpu_gpu }}
    build:
      string: cuda{{ cuda_compiler_version | replace('.', '') }}py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version != "None"]
      string: cpu_py{{ CONDA_PY }}h{{ PKG_HASH }}_{{ PKG_BUILDNUM }}  # [cuda_compiler_version == "None"]
      detect_binary_files_with_prefix: false
    requirements:
      run:
        - {{ pin_subpackage("tensorflow", exact=True) }}
    test:
      imports:
        - tensorflow

about:
  home: https://www.tensorflow.org/
  license: Apache-2.0
  license_file: LICENSE
  license_family: Apache
  summary: TensorFlow is an end-to-end open source platform for machine learning.
  description: |
    TensorFlow offers multiple levels of abstraction so you can choose the
    right one for your needs. Build and train models by using the high-level
    Keras API, which makes getting started with TensorFlow and machine learning
    easy.
  dev_url: https://github.com/tensorflow/tensorflow
  doc_url: https://www.tensorflow.org/learn

extra:
  skip-lints:
    - host_section_needs_exact_pinnings # Lots of python packages are needed in host and shouldn't be pinned.
    - missing_imports_or_run_test_py    # Some packages are tested through the main package tests.
    - missing_tests                     # This seems to be a linter mis-report.
    - output_missing_name               # The linter trips over tensorflow_cpu_gpu.
  feedstock-name: tensorflow
  recipe-maintainers:
    - ngam
    - farhantejani
    - ghego
    - h-vetinari
    - hajapy
    - jschueller
    - njzjz
    - waitingkuo
    - xhochy
    - hmaarrfk
    - wolfv
